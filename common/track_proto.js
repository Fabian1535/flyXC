'use strict'; // code generated by pbf v3.2.1

// Track ========================================

var Track = (exports.Track = {});

Track.read = function (pbf, end) {
  return pbf.readFields(Track._readField, { pilot: '', lat: [], lon: [], alt: [], ts: [] }, end);
};
Track._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.pilot = pbf.readString();
  else if (tag === 2) pbf.readPackedSVarint(obj.lat);
  else if (tag === 3) pbf.readPackedSVarint(obj.lon);
  else if (tag === 4) pbf.readPackedSVarint(obj.alt);
  else if (tag === 5) pbf.readPackedVarint(obj.ts);
};
Track.write = function (obj, pbf) {
  if (obj.pilot) pbf.writeStringField(1, obj.pilot);
  if (obj.lat) pbf.writePackedSVarint(2, obj.lat);
  if (obj.lon) pbf.writePackedSVarint(3, obj.lon);
  if (obj.alt) pbf.writePackedSVarint(4, obj.alt);
  if (obj.ts) pbf.writePackedVarint(5, obj.ts);
};

// TrackGroup ========================================

var TrackGroup = (exports.TrackGroup = {});

TrackGroup.read = function (pbf, end) {
  return pbf.readFields(TrackGroup._readField, { tracks: [] }, end);
};
TrackGroup._readField = function (tag, obj, pbf) {
  if (tag === 2) obj.tracks.push(Track.read(pbf, pbf.readVarint() + pbf.pos));
};
TrackGroup.write = function (obj, pbf) {
  if (obj.tracks) for (var i = 0; i < obj.tracks.length; i++) pbf.writeMessage(2, Track.write, obj.tracks[i]);
};

// GroundAltitude ========================================

var GroundAltitude = (exports.GroundAltitude = {});

GroundAltitude.read = function (pbf, end) {
  return pbf.readFields(GroundAltitude._readField, { altitudes: [], has_errors: false }, end);
};
GroundAltitude._readField = function (tag, obj, pbf) {
  if (tag === 1) pbf.readPackedSVarint(obj.altitudes);
  else if (tag === 2) obj.has_errors = pbf.readBoolean();
};
GroundAltitude.write = function (obj, pbf) {
  if (obj.altitudes) pbf.writePackedSVarint(1, obj.altitudes);
  if (obj.has_errors) pbf.writeBooleanField(2, obj.has_errors);
};

// GroundAltitudeGroup ========================================

var GroundAltitudeGroup = (exports.GroundAltitudeGroup = {});

GroundAltitudeGroup.read = function (pbf, end) {
  return pbf.readFields(GroundAltitudeGroup._readField, { ground_altitudes: [] }, end);
};
GroundAltitudeGroup._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.ground_altitudes.push(GroundAltitude.read(pbf, pbf.readVarint() + pbf.pos));
};
GroundAltitudeGroup.write = function (obj, pbf) {
  if (obj.ground_altitudes)
    for (var i = 0; i < obj.ground_altitudes.length; i++)
      pbf.writeMessage(1, GroundAltitude.write, obj.ground_altitudes[i]);
};

// Airspaces ========================================

var Airspaces = (exports.Airspaces = {});

Airspaces.read = function (pbf, end) {
  return pbf.readFields(
    Airspaces._readField,
    { start_ts: [], end_ts: [], name: [], category: [], top: [], bottom: [], flags: [], has_errors: false },
    end,
  );
};
Airspaces._readField = function (tag, obj, pbf) {
  if (tag === 1) pbf.readPackedSVarint(obj.start_ts);
  else if (tag === 2) pbf.readPackedSVarint(obj.end_ts);
  else if (tag === 3) obj.name.push(pbf.readString());
  else if (tag === 4) obj.category.push(pbf.readString());
  else if (tag === 5) pbf.readPackedSVarint(obj.top);
  else if (tag === 6) pbf.readPackedSVarint(obj.bottom);
  else if (tag === 7) pbf.readPackedVarint(obj.flags);
  else if (tag === 8) obj.has_errors = pbf.readBoolean();
};
Airspaces.write = function (obj, pbf) {
  if (obj.start_ts) for (var i = 0; i < obj.start_ts.length; i++) pbf.writeSVarintField(1, obj.start_ts[i]);
  if (obj.end_ts) for (i = 0; i < obj.end_ts.length; i++) pbf.writeSVarintField(2, obj.end_ts[i]);
  if (obj.name) for (i = 0; i < obj.name.length; i++) pbf.writeStringField(3, obj.name[i]);
  if (obj.category) for (i = 0; i < obj.category.length; i++) pbf.writeStringField(4, obj.category[i]);
  if (obj.top) for (i = 0; i < obj.top.length; i++) pbf.writeSVarintField(5, obj.top[i]);
  if (obj.bottom) for (i = 0; i < obj.bottom.length; i++) pbf.writeSVarintField(6, obj.bottom[i]);
  if (obj.flags) for (i = 0; i < obj.flags.length; i++) pbf.writeVarintField(7, obj.flags[i]);
  if (obj.has_errors) pbf.writeBooleanField(8, obj.has_errors);
};

// AirspacesGroup ========================================

var AirspacesGroup = (exports.AirspacesGroup = {});

AirspacesGroup.read = function (pbf, end) {
  return pbf.readFields(AirspacesGroup._readField, { airspaces: [] }, end);
};
AirspacesGroup._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.airspaces.push(Airspaces.read(pbf, pbf.readVarint() + pbf.pos));
};
AirspacesGroup.write = function (obj, pbf) {
  if (obj.airspaces)
    for (var i = 0; i < obj.airspaces.length; i++) pbf.writeMessage(1, Airspaces.write, obj.airspaces[i]);
};

// MetaTrackGroup ========================================

var MetaTrackGroup = (exports.MetaTrackGroup = {});

MetaTrackGroup.read = function (pbf, end) {
  return pbf.readFields(
    MetaTrackGroup._readField,
    { id: 0, num_postprocess: 0, track_group_bin: null, ground_altitude_group_bin: null, airspaces_group_bin: null },
    end,
  );
};
MetaTrackGroup._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.id = pbf.readVarint(true);
  else if (tag === 2) obj.num_postprocess = pbf.readVarint();
  else if (tag === 3) obj.track_group_bin = pbf.readBytes();
  else if (tag === 4) obj.ground_altitude_group_bin = pbf.readBytes();
  else if (tag === 5) obj.airspaces_group_bin = pbf.readBytes();
};
MetaTrackGroup.write = function (obj, pbf) {
  if (obj.id) pbf.writeVarintField(1, obj.id);
  if (obj.num_postprocess) pbf.writeVarintField(2, obj.num_postprocess);
  if (obj.track_group_bin) pbf.writeBytesField(3, obj.track_group_bin);
  if (obj.ground_altitude_group_bin) pbf.writeBytesField(4, obj.ground_altitude_group_bin);
  if (obj.airspaces_group_bin) pbf.writeBytesField(5, obj.airspaces_group_bin);
};

// MetaTracks ========================================

var MetaTracks = (exports.MetaTracks = {});

MetaTracks.read = function (pbf, end) {
  return pbf.readFields(MetaTracks._readField, { meta_track_groups_bin: [] }, end);
};
MetaTracks._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.meta_track_groups_bin.push(pbf.readBytes());
};
MetaTracks.write = function (obj, pbf) {
  if (obj.meta_track_groups_bin)
    for (var i = 0; i < obj.meta_track_groups_bin.length; i++) pbf.writeBytesField(1, obj.meta_track_groups_bin[i]);
};
