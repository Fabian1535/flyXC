syntax = "proto3";

// A single track.
// Fixes are differential encoded.
message Track {
  string pilot = 1;
  repeated sint32 lat = 2;
  repeated sint32 lon = 3;
  repeated sint32 alt = 4;
  // Time in seconds.
  repeated uint32 timeSec = 5;
}

// All the tracks for a single file.
// Stored in the database.
message TrackGroup {
  repeated Track tracks = 2;
}

// Ground altitude for a single Track.
message GroundAltitude {
  repeated sint32 altitudes = 1;
  // True when errors were encountered while retrieveing the altitudes.
  bool has_errors = 2;
}

// Ground altitude for a TrackGroup.
// Stored in the database.
message GroundAltitudeGroup {
  repeated GroundAltitude ground_altitudes = 1;
}

// Airspaces along a single track.
message Airspaces {
  // Start and end in seconds.
  repeated sint32 start_sec = 1;
  repeated sint32 end_sec = 2;
  repeated string name = 3;
  // Unused after 2023-10.
  // Might still be used on older tracks from DB.
  repeated string category = 4;
  repeated sint32 top = 5;
  repeated sint32 bottom = 6;
  repeated uint32 flags = 7;
  repeated bool into = 9;
  // openaip icao class (added 2023-10).
  repeated uint32 icao_class = 10;
  // openaip type (added 2023-10).
  repeated uint32 type = 11;
  // openaip activity (added 2023-10).
  repeated uint32 activity = 12;
  bool has_errors = 8;

}

// Airspaces for a TrackGroup.
message AirspacesGroup {
  repeated Airspaces airspaces = 1;
}

// Metadata for a TrackGroup.
message MetaTrackGroup {
  int64 id = 1;
  uint32 num_postprocess = 2;
  optional bytes track_group_bin = 3;
  // This field is only present when there are some altitude data.
  // The GroundAltitude can still have has_errors = true if not all the data
  // were retrieved correctly.
  optional bytes ground_altitude_group_bin = 4;
  optional bytes airspaces_group_bin = 5;
  // Domain of the track
  // This is moslty usefull when the track is loaded by id as we still want to to use the API credentials of the originating domain.
  optional string domain = 6;
}

message MetaTracks {
  repeated bytes meta_track_groups_bin = 1;
}

message Route {
  repeated float lat = 1;
  repeated float lon = 2;
  repeated float alt = 3;
}

message MetaTrackGroupsAndRoute {
  repeated MetaTrackGroup meta_track_groups = 1;
  optional Route route = 2;
}